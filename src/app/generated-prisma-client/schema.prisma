// Define database connection via the `DATABASE_URL` env var
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define custom output path for generated Prisma Client
generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated-prisma-client"
}

// Example data model
model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(PROFESIONAL)

  // Location fields for professionals
  officeAddress String?
  city          String?

  patients    Patient[]
  visits      Visit[]
  specialties Specialty[] @relation("ProfessionalSpecialties")
}

model Patient {
  id          Int       @id @default(autoincrement())
  name        String
  dni         String    @unique
  email       String    @unique
  phone       String?
  dateOfBirth DateTime? @map("date_of_birth")
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  professional    User             @relation(fields: [professionalId], references: [id])
  professionalId  Int
  clinicalHistory ClinicalHistory?
}

enum Role {
  ADMIN
  PROFESIONAL
}

model Specialty {
  id            Int    @id @default(autoincrement())
  name          String @unique
  professionals User[] @relation("ProfessionalSpecialties")
}

model ClinicalHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int      @unique
  visits    Visit[]
}

model Visit {
  id                Int             @id @default(autoincrement())
  visitDate         DateTime        @default(now())
  reason            String
  epicrisis         String          @db.Text
  diagnosis         String
  treatment         String
  clinicalHistory   ClinicalHistory @relation(fields: [clinicalHistoryId], references: [id])
  clinicalHistoryId Int
  professional      User            @relation(fields: [professionalId], references: [id])
  professionalId    Int
  studies           MedicalStudy[]
}

model MedicalStudy {
  id         Int      @id @default(autoincrement())
  fileName   String
  fileUrl    String
  fileType   String
  uploadedAt DateTime @default(now())
  visit      Visit    @relation(fields: [visitId], references: [id])
  visitId    Int
}
